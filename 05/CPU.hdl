// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a= instruction[15], b= true, out= isCinstr);
    Not(in= isCinstr, out= isAinstr);

    And(a= isCinstr, b= instruction[5], out= isAwrite);
    Or(a= isAinstr, b= isAwrite, out= loadA);
	Mux16(a= instruction, b= outALU, sel= instruction[15], out= outaorc);
    ARegister(in= outaorc, load= loadA, out= outa, out[0..14] = addressM);

    Mux16(a= outa, b= inM, sel= instruction[12], out= outaorm);

    And(a= isCinstr, b= instruction[4], out= isDwrite);
    DRegister(in= outALU, load= isDwrite, out= outd);
    ALU(x= outd, y= outaorm, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outM, out=outALU, zr= outzr, ng= outng);

    Not(in= outzr, out= outnonzr);
    Not(in= outng, out= outnonng);
    And(a= outnonzr, b= outnonng, out= outpos);
    And(a= outpos, b= instruction[0], out= loadpos);
    And(a= outzr, b= instruction[1], out= loadzr);
    And(a= outng, b= instruction[2], out= loadng);
    Or(a= loadpos, b= loadzr, out= loador1);
    Or(a= loador1, b= loadng, out= loador2);
    And(a= isCinstr, b= loador2, out= loadpc);
    Not(in= loadpc, out= incpc);
    PC(in= outa, load= loadpc, inc= incpc, reset= reset, out[0..14]= pc);

    And(a= isCinstr, b= instruction[3], out= writeM);
}